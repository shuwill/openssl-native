CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(natives C)

SET(CMAKE_C_STANDARD 11)

SET(OPENSSL_NATIVE_LIBRARY_TYPE "shared" CACHE STRING "Type of cpuinfo library (shared, static, or default) to build")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY  "../libs" )

# openssl link library
IF(CMAKE_SYSTEM_NAME MATCHES "^(Darwin)$")
    SET(OPENSSL_DIR "/opt/homebrew/Cellar/openssl@3/3.1.1")
    SET(OPENSSL_LINK_DIR ${OPENSSL_DIR}/lib)
    SET(OPENSSL_LINK_NAME "libcrypto.3.dylib")
    SET(OPENSSL_OUTPUT_LINK_NAME "libcrypto.dylib")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "^(Windows|WindowsStore|CYGWIN|MSYS)$")
    SET(OPENSSL_DIR "C:/Program Files/OpenSSL-Win64")
    SET(OPENSSL_LINK_DIR ${OPENSSL_DIR}/bin)
    SET(OPENSSL_LINK_NAME "libcrypto-3-x64.dll")
    SET(OPENSSL_OUTPUT_LINK_NAME "libcrypto.dll")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "^(Linux)$")
    SET(OPENSSL_DIR "/usr/include")
    SET(OPENSSL_LINK_NAME "libcrypto.so")
    SET(OPENSSL_OUTPUT_LINK_NAME "libcrypto.so")
ELSE()
    MESSAGE(FATAL_ERROR "Unsupported system name ${CMAKE_SYSTEM_NAME}")
ENDIF()

SET(OPENSSL_NATIVES_INC_DIR "./include")
SET(OPENSSL_INC_DIR ${OPENSSL_DIR}/include)

FIND_PACKAGE(JNI REQUIRED)

INCLUDE_DIRECTORIES(${OPENSSL_INC_DIR} ${JNI_INCLUDE_DIRS} ${OPENSSL_NATIVES_INC_DIR})

LINK_DIRECTORIES(${OPENSSL_LINK_DIR})
LINK_LIBRARIES(${OPENSSL_LINK_NAME})

SET(OPENSSL_NATIVE_SRCS src/common_native.c
        src/openssl_example.c
        src/ans1_native.c
        src/commom.c
        src/evp_naitve.c
        src/x509_native.c)

IF(OPENSSL_NATIVE_LIBRARY_TYPE STREQUAL "default")
    ADD_EXECUTABLE(natives ${OPENSSL_NATIVE_SRCS})
ELSEIF(OPENSSL_NATIVE_LIBRARY_TYPE STREQUAL "shared")
    ADD_LIBRARY(natives SHARED ${OPENSSL_NATIVE_SRCS})
ELSEIF(OPENSSL_NATIVE_LIBRARY_TYPE STREQUAL "static")
    ADD_LIBRARY(natives STATIC ${OPENSSL_NATIVE_SRCS})
ELSE()
    MESSAGE(FATAL_ERROR "Unsupported library type ${CPUINFO_LIBRARY_TYPE}")
ENDIF()

SET_TARGET_PROPERTIES(natives PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../libs)

CONFIGURE_FILE(${OPENSSL_LINK_DIR}/${OPENSSL_LINK_NAME} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${OPENSSL_OUTPUT_LINK_NAME} COPYONLY)
